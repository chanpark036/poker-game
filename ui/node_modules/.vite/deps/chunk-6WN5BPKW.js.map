{
  "version": 3,
  "sources": ["../../../../server/node_modules/socket.io-adapter/dist/index.js"],
  "sourcesContent": ["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.Adapter = void 0;\r\nconst events_1 = require(\"events\");\r\nclass Adapter extends events_1.EventEmitter {\r\n    /**\r\n     * In-memory adapter constructor.\r\n     *\r\n     * @param {Namespace} nsp\r\n     */\r\n    constructor(nsp) {\r\n        super();\r\n        this.nsp = nsp;\r\n        this.rooms = new Map();\r\n        this.sids = new Map();\r\n        this.encoder = nsp.server.encoder;\r\n    }\r\n    /**\r\n     * To be overridden\r\n     */\r\n    init() { }\r\n    /**\r\n     * To be overridden\r\n     */\r\n    close() { }\r\n    /**\r\n     * Returns the number of Socket.IO servers in the cluster\r\n     *\r\n     * @public\r\n     */\r\n    serverCount() {\r\n        return Promise.resolve(1);\r\n    }\r\n    /**\r\n     * Adds a socket to a list of room.\r\n     *\r\n     * @param {SocketId}  id      the socket id\r\n     * @param {Set<Room>} rooms   a set of rooms\r\n     * @public\r\n     */\r\n    addAll(id, rooms) {\r\n        if (!this.sids.has(id)) {\r\n            this.sids.set(id, new Set());\r\n        }\r\n        for (const room of rooms) {\r\n            this.sids.get(id).add(room);\r\n            if (!this.rooms.has(room)) {\r\n                this.rooms.set(room, new Set());\r\n                this.emit(\"create-room\", room);\r\n            }\r\n            if (!this.rooms.get(room).has(id)) {\r\n                this.rooms.get(room).add(id);\r\n                this.emit(\"join-room\", room, id);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Removes a socket from a room.\r\n     *\r\n     * @param {SocketId} id     the socket id\r\n     * @param {Room}     room   the room name\r\n     */\r\n    del(id, room) {\r\n        if (this.sids.has(id)) {\r\n            this.sids.get(id).delete(room);\r\n        }\r\n        this._del(room, id);\r\n    }\r\n    _del(room, id) {\r\n        const _room = this.rooms.get(room);\r\n        if (_room != null) {\r\n            const deleted = _room.delete(id);\r\n            if (deleted) {\r\n                this.emit(\"leave-room\", room, id);\r\n            }\r\n            if (_room.size === 0 && this.rooms.delete(room)) {\r\n                this.emit(\"delete-room\", room);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Removes a socket from all rooms it's joined.\r\n     *\r\n     * @param {SocketId} id   the socket id\r\n     */\r\n    delAll(id) {\r\n        if (!this.sids.has(id)) {\r\n            return;\r\n        }\r\n        for (const room of this.sids.get(id)) {\r\n            this._del(room, id);\r\n        }\r\n        this.sids.delete(id);\r\n    }\r\n    /**\r\n     * Broadcasts a packet.\r\n     *\r\n     * Options:\r\n     *  - `flags` {Object} flags for this packet\r\n     *  - `except` {Array} sids that should be excluded\r\n     *  - `rooms` {Array} list of rooms to broadcast to\r\n     *\r\n     * @param {Object} packet   the packet object\r\n     * @param {Object} opts     the options\r\n     * @public\r\n     */\r\n    broadcast(packet, opts) {\r\n        const flags = opts.flags || {};\r\n        const packetOpts = {\r\n            preEncoded: true,\r\n            volatile: flags.volatile,\r\n            compress: flags.compress\r\n        };\r\n        packet.nsp = this.nsp.name;\r\n        const encodedPackets = this.encoder.encode(packet);\r\n        this.apply(opts, socket => {\r\n            if (typeof socket.notifyOutgoingListeners === \"function\") {\r\n                socket.notifyOutgoingListeners(packet);\r\n            }\r\n            socket.client.writeToEngine(encodedPackets, packetOpts);\r\n        });\r\n    }\r\n    /**\r\n     * Broadcasts a packet and expects multiple acknowledgements.\r\n     *\r\n     * Options:\r\n     *  - `flags` {Object} flags for this packet\r\n     *  - `except` {Array} sids that should be excluded\r\n     *  - `rooms` {Array} list of rooms to broadcast to\r\n     *\r\n     * @param {Object} packet   the packet object\r\n     * @param {Object} opts     the options\r\n     * @param clientCountCallback - the number of clients that received the packet\r\n     * @param ack                 - the callback that will be called for each client response\r\n     *\r\n     * @public\r\n     */\r\n    broadcastWithAck(packet, opts, clientCountCallback, ack) {\r\n        const flags = opts.flags || {};\r\n        const packetOpts = {\r\n            preEncoded: true,\r\n            volatile: flags.volatile,\r\n            compress: flags.compress\r\n        };\r\n        packet.nsp = this.nsp.name;\r\n        // we can use the same id for each packet, since the _ids counter is common (no duplicate)\r\n        packet.id = this.nsp._ids++;\r\n        const encodedPackets = this.encoder.encode(packet);\r\n        let clientCount = 0;\r\n        this.apply(opts, socket => {\r\n            // track the total number of acknowledgements that are expected\r\n            clientCount++;\r\n            // call the ack callback for each client response\r\n            socket.acks.set(packet.id, ack);\r\n            if (typeof socket.notifyOutgoingListeners === \"function\") {\r\n                socket.notifyOutgoingListeners(packet);\r\n            }\r\n            socket.client.writeToEngine(encodedPackets, packetOpts);\r\n        });\r\n        clientCountCallback(clientCount);\r\n    }\r\n    /**\r\n     * Gets a list of sockets by sid.\r\n     *\r\n     * @param {Set<Room>} rooms   the explicit set of rooms to check.\r\n     */\r\n    sockets(rooms) {\r\n        const sids = new Set();\r\n        this.apply({ rooms }, socket => {\r\n            sids.add(socket.id);\r\n        });\r\n        return Promise.resolve(sids);\r\n    }\r\n    /**\r\n     * Gets the list of rooms a given socket has joined.\r\n     *\r\n     * @param {SocketId} id   the socket id\r\n     */\r\n    socketRooms(id) {\r\n        return this.sids.get(id);\r\n    }\r\n    /**\r\n     * Returns the matching socket instances\r\n     *\r\n     * @param opts - the filters to apply\r\n     */\r\n    fetchSockets(opts) {\r\n        const sockets = [];\r\n        this.apply(opts, socket => {\r\n            sockets.push(socket);\r\n        });\r\n        return Promise.resolve(sockets);\r\n    }\r\n    /**\r\n     * Makes the matching socket instances join the specified rooms\r\n     *\r\n     * @param opts - the filters to apply\r\n     * @param rooms - the rooms to join\r\n     */\r\n    addSockets(opts, rooms) {\r\n        this.apply(opts, socket => {\r\n            socket.join(rooms);\r\n        });\r\n    }\r\n    /**\r\n     * Makes the matching socket instances leave the specified rooms\r\n     *\r\n     * @param opts - the filters to apply\r\n     * @param rooms - the rooms to leave\r\n     */\r\n    delSockets(opts, rooms) {\r\n        this.apply(opts, socket => {\r\n            rooms.forEach(room => socket.leave(room));\r\n        });\r\n    }\r\n    /**\r\n     * Makes the matching socket instances disconnect\r\n     *\r\n     * @param opts - the filters to apply\r\n     * @param close - whether to close the underlying connection\r\n     */\r\n    disconnectSockets(opts, close) {\r\n        this.apply(opts, socket => {\r\n            socket.disconnect(close);\r\n        });\r\n    }\r\n    apply(opts, callback) {\r\n        const rooms = opts.rooms;\r\n        const except = this.computeExceptSids(opts.except);\r\n        if (rooms.size) {\r\n            const ids = new Set();\r\n            for (const room of rooms) {\r\n                if (!this.rooms.has(room))\r\n                    continue;\r\n                for (const id of this.rooms.get(room)) {\r\n                    if (ids.has(id) || except.has(id))\r\n                        continue;\r\n                    const socket = this.nsp.sockets.get(id);\r\n                    if (socket) {\r\n                        callback(socket);\r\n                        ids.add(id);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            for (const [id] of this.sids) {\r\n                if (except.has(id))\r\n                    continue;\r\n                const socket = this.nsp.sockets.get(id);\r\n                if (socket)\r\n                    callback(socket);\r\n            }\r\n        }\r\n    }\r\n    computeExceptSids(exceptRooms) {\r\n        const exceptSids = new Set();\r\n        if (exceptRooms && exceptRooms.size > 0) {\r\n            for (const room of exceptRooms) {\r\n                if (this.rooms.has(room)) {\r\n                    this.rooms.get(room).forEach(sid => exceptSids.add(sid));\r\n                }\r\n            }\r\n        }\r\n        return exceptSids;\r\n    }\r\n    /**\r\n     * Send a packet to the other Socket.IO servers in the cluster\r\n     * @param packet - an array of arguments, which may include an acknowledgement callback at the end\r\n     */\r\n    serverSideEmit(packet) {\r\n        console.warn(\"this adapter does not support the serverSideEmit() functionality\");\r\n    }\r\n}\r\nexports.Adapter = Adapter;\r\n"],
  "mappings": "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",
  "names": []
}
